@model ProjectModel
@{
	ViewData["Title"] = "Create";
}

<div id="create" class="popup">
	<div class="wrapper">
		<img id="close" src="/X.svg" />
		<h3 class="heading">Add Project</h3>
		<img class="logo-img" src="/Image.svg" />
		<div class="form-container">
			<form id="" asp-action="Create" asp-controller="Home" method="post" novalidate>
				<input type="hidden" asp-for="UserName" value="@userManager.GetUserName(User)" />
				<div class="form-group create">
					<label asp-for="ProjectName"></label>
					<div class="field-group">
						<input asp-for="ProjectName" />
						<span class="ProjectName" asp-validation-for="ProjectName"></span>
					</div>
				</div>

				<div class="form-group create">
					<label asp-for="Client"></label>
					<div class="field-group">
						<input asp-for="Client" />
						<span class="Client" asp-validation-for="Client"></span>
					</div>
				</div>

				<div class="form-group">
					<label asp-for="Description"></label>
					<input type="hidden" id="wysiwyg-content" asp-for="Description" />
					<div class="wysiwyg-container" style="display: flex;flex-direction: column-reverse;">
						<div id="editor">
							@if (Model != null)
								@Html.Raw(Model.Description)
						</div>
					</div>
				</div>

				<div class="date-wrapper">
					<div class="form-group create">
						<label asp-for="StartDate"></label>
						<div class="field-group">
							<img src="~/Calendarsvg.svg" />
							@if (Html.ValidationMessageFor(m => m.StartDate) == null)
							{
								<input id="start-date" type="text" value="@Model?.StartDate.ToString("MMMM dd, yyyy")" asp-for="StartDate" />
							}
							else {
								<input id="start-date" type="text" value="@DateTime.Now.ToString("MMMM dd, yyyy")" asp-for="StartDate" />
							}
							<span asp-validation-for="StartDate"></span>
						</div>
					</div>
					<div class="form-group create">
						<label asp-for="EndDate"></label>
						<div class="field-group">
							<img src="~/Calendarsvg.svg" />
							@if (Html.ValidationMessageFor(m => m.EndDate) == null)
							{
								<input id="end-date" type="text" value="@Model?.EndDate.ToString("MMMM dd, yyyy")" asp-for="EndDate" />
							}
							else
							{
								<input id="end-date" type="text" value="@DateTime.Now.ToString("MMMM dd, yyyy")" asp-for="EndDate" />
							}
							<span asp-validation-for="EndDate"></span>
						</div>
					</div>
				</div>

				<div class="form-group signup terms">
					<label asp-for="Completed"></label>
					<div class="field-group terms">
						<input asp-for="Completed" />
						<span asp-validation-for="Completed"></span>
					</div>
				</div>

				<div class="form-group create">
					<label asp-for="Budget"></label>
					<div class="field-group">
						<input asp-for="Budget" />
						<span class="Budget" asp-validation-for="Budget"></span>
					</div>
				</div>

				<div class="create-btn">
					<a asp-area="" asp-controller="Home" asp-action="Index">Cancel</a>
					<button type="submit" class="btn btn-submit btn-primary">Create</button>
				</div>
			</form>
		</div>
	</div>
</div>

@section Scripts {
	<script>

		const toolbarOptions = [
		  ['bold', 'italic', 'underline'],
		  [{ align: '' }, { align: 'center' }, { align: 'right' }],
		  [{ 'list': 'bullet'}, { 'list': 'ordered' }],
		  ['link'],
		];

		const quill = new Quill('#editor', {
			modules: {
			  toolbar: toolbarOptions
			},
			placeholder: 'Type something..',
			theme: 'snow'
		});

		quill.on('editor-change', (eventName) => {
			const html = quill.getSemanticHTML(0);
			const inputText = document.getElementById('wysiwyg-content');
			inputText.value = html;
		});


		$(document).ready(function () {

			$(function () {
				$("#start-date").datepicker(
					{
						dateFormat: "MM dd, yy"
					}
				);

				$("#end-date").datepicker(
					{
						dateFormat: "MM dd, yy"
					}
				);
			});
		})

		const validateCreate = (e, cName) => {
			const field = cName ? cName : e.target.name;
			let errMsg = document.querySelector(`span[class*="${field} field-validation"]`);


			if (field === "Budget" || field === "update-Budget") {
				const budgetPattern = /^[0-9]+(\.\d{3})*(\.\d+)?$/
				if (!budgetPattern.test(e.target.value) && e.target.value !== "") {
					errMsg.innerHTML = 'Number should be either only digits or in currency format e.g. "2.500.000"';
				} else {
					errMsg.innerHTML = "";
				}
			}
			else if (e.target.value.trim() === "") {
				errMsg.innerHTML = "Required field";
			}
			else {
				errMsg.innerHTML = "";
			}
		}

		const debounce = (mainFunction, delay) => {
			let timer;

			return function (...args) {
				clearTimeout(timer);

				timer = setTimeout(() => {
					mainFunction(...args);
				}, delay);
			};
		};

		const checkBudget = debounce(validateCreate, 1000);


		const projectField = document.querySelector('input[name="ProjectName"]');
		const clientField = document.querySelector('input[name="Client"]');
		const budgetField = document.querySelector('input[name="Budget"]');

		projectField.addEventListener("focusout", validateCreate);
		clientField.addEventListener("focusout", validateCreate);
		budgetField.addEventListener("input", checkBudget);
	</script>
}