@model IEnumerable<ProjectModel>
@{
    ViewData["Title"] = "Home Page";
}

<div class="create-form" style="display:none">
    @await Html.PartialAsync("Partials/_Create", new ProjectModel())
</div>
<div class="update-form" style="display:none">
</div>
<div id="projects-view">
    <div class="project-container">
        <div class="sidebar">
            <img class="logo" src="/logosvg.svg" />
            <div class="btn-background">

            </div>
        </div>

        <div class="workspace">
            <div class="menu-bar">
                <div class="handle-account">
                    <img src="/Setting.png" />
                    <span></span>
                    <img id="user-btn" src="/avatar.png" />
                </div>
                <div class="account-options">
                    <div class="menu-item">
                        <img class="card-avatar" src="/avatar.png" />
                        <p>@userManager.GetUserName(User)</p>
                    </div>
                    <div class="logout">
                        <img src="/Logout.png" />
                        <a asp-controller="Home" asp-action="LogOut">Logout</a>
                    </div>
                </div>
            </div>

            <div class="add-section">
                <h2 class="heading">Projects</h2>
                <button class="add-btn"><img class="plus" src="/Plus.svg" /> Add Project</button>
            </div>

            <div class="filter-bar">
                @{
                    var started = 0;
                    var completed = 0;
                }
                @foreach (var project in Model)
                {
                    if (project.Completed)
                    {
                        completed++;
                    }
                    else {
                        started++;
                    }
                }
                <a onclick="addStylesheetRules('all')" class="filter-tab highlighted">ALL [@(started + completed)]</a>
                <a onclick="addStylesheetRules('started')" class="filter-tab">STARTED [@started]</a>
                <a onclick="addStylesheetRules('completed')" class="filter-tab">COMPLETED [@completed]</a>
            </div>
            <div class="outlet">
                @foreach (var project in Model)
                {
                    <div id="@project.Id" class="card-wrapper @(project.Completed ? "completed" : "started")">
                        <div class="project-card">
                            <div onclick="toggleEdit(@project.Id)" data-id="@project.Id" class="edit-btn"></div>
                            <div id="opt-@project.Id" class="project-options" style="display:none">
                                <div class="menu-item">
                                    <img class="opt-img" src="~/pen.svg" />
                                    <button onclick="getUpdateData(@project.Id)">Edit</button>
                                </div>
                                <hr />
                                <div class="menu-item">
                                    <img class="opt-img" src="~/trashcan.svg" />
                                    <button class="delete">Delete Project</button>
                                </div>
                            </div>
                            <div class="top-info">
                                <img src="/Image.svg" />
                                <div>
                                    <h6>@project.ProjectName</h6>
                                    <p class="client-p">@project.Client</p>
                                </div>
                            </div>
                            <p class="description">@Html.Raw(project.Description)</p>
                        </div>
                    </div>
                }
                @{
                    var remainder = Model.Count() % 3;
                    var missingCards = 3 - remainder;

                    for (int i = 0; i < missingCards; i++)
                    {
                        <div class="project-card dummy">
                            <div class="top-info">
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const userBtn = document.querySelector("#user-btn");
        const addBtn = document.querySelector(".add-btn");
        const closeBtn = document.querySelector('#close');
        const accountCard = document.querySelector(".account-options");
        const formModal = document.querySelector(".create-form");
        const updateModal = document.querySelector(".update-form");
        accountCard.style.display = "none"
        formModal.style.display = "none"


        const highLight = (e) => {
            filterTabs.forEach(el => el.classList.remove("highlighted"));
            e.target.classList.add("highlighted");
        }

        const filterTabs = document.querySelectorAll(".filter-tab");
        filterTabs.forEach(el => el.addEventListener("click", highLight));



        const toggleModal = (elementClass) => {
            const el = document.querySelector(elementClass);
            if (el.style.display === "none") {
                el.style.display = "block";
            } else {
                el.style.display = "none"
            }
        }

        const toggleEdit = (elemId) => {
            const el = document.querySelector("#opt-" + elemId);
            if (el.style.display === "none") {
                el.style.display = "block";
            } else {
                el.style.display = "none"
            }
        }

        addBtn.addEventListener("click", () => toggleModal(".create-form"));
        closeBtn.addEventListener("click", () => toggleModal(".create-form"));
        userBtn.addEventListener("click", () => toggleModal(".account-options"));


        const getUpdateData = (id) => {
            fetch('/Home/GetUpdateForm/' + id)
                .then((response) => response.text())
                .then((body) => {
                    document.querySelector('.update-form').innerHTML = body;
                })
                .then(() => {
                    toggleModal(".update-form");
                    const closeUpdateBtn = document.querySelector('#close-update');
                    closeUpdateBtn.addEventListener("click", () => { toggleModal(".update-form") });
                    initUpdateEditor();
                    initUpdateValidation();
                })
            toggleEdit(id);
        }

        const toolbarOptions = [
          ['bold', 'italic', 'underline'],
          [{ align: '' }, { align: 'center' }, { align: 'right' }],
          [{ 'list': 'bullet'}, { 'list': 'ordered' }],
          ['link'],
        ];

        const quill = new Quill('#editor', {
            modules: {
              toolbar: toolbarOptions
            },
            placeholder: 'Type something..',
            theme: 'snow'
        });


        quill.on('editor-change', (eventName) => {
            const html = quill.getSemanticHTML(0);
            const inputText = document.getElementById('wysiwyg-content');
            inputText.value = html;
        });

        $(document).ready(function () {

            $(function () {
                $("#start-date").datepicker(
                    {
                        dateFormat: "MM dd, yy"
                    }
                );

                $("#end-date").datepicker(
                    {
                        dateFormat: "MM dd, yy"
                    }
                );
            });
        })

        const initUpdateEditor = () => {

            const quill_2 = new Quill('#update-editor', {
                modules: {
                  toolbar: toolbarOptions
                },
                placeholder: 'Type something..',
                theme: 'snow'
            });

            quill_2.on('editor-change', (eventName) => {
                const html = quill_2.getSemanticHTML(0);
                const inputText = document.getElementById('wysiwyg-content-update');
                inputText.value = html;
            });

            $(function () {
                $("#update-start-date").datepicker(
                    {
                        dateFormat: "MM dd, yy"
                    }
                );

                $("#update-end-date").datepicker(
                    {
                        dateFormat: "MM dd, yy"
                    }
                );
            });
        }


        function addStylesheetRules(filter) {
            const styleEl = document.createElement("style");
            document.head.appendChild(styleEl);
            const styleSheet = styleEl.sheet;

            switch (filter) {
                case "all":
                    styleSheet.insertRule(".completed { display: block }", 0);
                    styleSheet.insertRule(".started { display: block }", 1);
                    break;
                case "started":
                    styleSheet.insertRule(".completed { display: none }", 0);
                    styleSheet.insertRule(".started { display: block }", 1);
                    break;
                case "completed":
                    styleSheet.insertRule(".completed { display: block }", 0);
                    styleSheet.insertRule(".started { display: none }", 1);
                    break;
            }
        }


        const initUpdateValidation = () => {
            const checkUpdateBudget = debounce(validateCreate, 1000);
            const updateProjectField = document.querySelector('input[class="update-ProjectName"]');
            const updateClientField = document.querySelector('input[class="update-Client"]');
            const updateBudgetField = document.querySelector('input[class="update-Budget"]');
            updateProjectField.addEventListener("focusout", (e) => { validateCreate(e, "update-ProjectName") });
            updateClientField.addEventListener("focusout", (e) => { validateCreate(e, "update-Client") });
            updateBudgetField.addEventListener("input", (e) => { checkUpdateBudget(e, "update-Budget") });
        }

        const validateCreate = (e, cName) => {
            const field = cName ? cName : e.target.name;
            let errMsg = document.querySelector(`span[class*="${field} field-validation"]`);


            if (field === "Budget" || field === "update-Budget") {
                const budgetPattern = /^[0-9]+(\.\d{3})*(\.\d+)?$/
                if (!budgetPattern.test(e.target.value) && e.target.value !== "") {
                    errMsg.innerHTML = 'Number should be either only digits or in currency format e.g. "2.500.000"';
                } else {
                    errMsg.innerHTML = "";
                }
            }
            else if (e.target.value.trim() === "") {
                errMsg.innerHTML = "Required field";
            }
            else {
                errMsg.innerHTML = "";
            }
        }

        const debounce = (mainFunction, delay) => {
            let timer;

            return function (...args) {
                clearTimeout(timer);

                timer = setTimeout(() => {
                    mainFunction(...args);
                }, delay);
            };
        };

        const checkBudget = debounce(validateCreate, 1000);


        const projectField = document.querySelector('input[name="ProjectName"]');
        const clientField = document.querySelector('input[name="Client"]');
        const budgetField = document.querySelector('input[name="Budget"]');

        projectField.addEventListener("focusout", validateCreate);
        clientField.addEventListener("focusout", validateCreate);
        budgetField.addEventListener("input", checkBudget);
    </script>
}